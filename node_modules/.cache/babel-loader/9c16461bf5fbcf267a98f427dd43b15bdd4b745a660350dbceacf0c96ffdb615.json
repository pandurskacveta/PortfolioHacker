{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pandu\\\\Desktop\\\\YEAR 2\\\\PERSONAL PORTFOLIO\\\\personal-portfolio\\\\src\\\\components\\\\Banner.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Col, Container, Row, Nav } from \"react-bootstrap\";\nimport { ArrowRightCircle } from \"react-bootstrap-icons\";\nimport moon from '../assets/img/moon.svg';\nimport onUpdateActiveLink from '../components/NavBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Banner = () => {\n  _s();\n  // indicating which word is currently displaying\n  const [loopNum, setLoopNum] = useState(0);\n  // indicating if the word is being typed or deleted\n  const [isDeleting, setIsDeleting] = useState(false);\n  // indicating what text is being shown for the component / showing a small portion\n  const [text, setText] = useState('');\n  // determines how fast a letter comes after the previous one\n  const [delta, setDelta] = useState(300 - Math.random() * 100);\n  // indicates how much time passes between 1 extra letter being typed\n  const period = 2000;\n\n  // list of the words I am rotating\n  const rotation = [\"Tsveta Pandurska\", \"a Fontys Student\", \"an aspiring WebDev\"];\n\n  // function for typing and deleting\n  useEffect(() => {\n    let ticker = setInterval(() => {\n      tick();\n    }, delta);\n\n    // then it clears\n    return () => {\n      clearInterval(ticker);\n    };\n    // runs every time the text gets updated\n  }, [text]);\n  const onUpdateActiveLink = value => {\n    setActiveLink(value);\n  };\n  const tick = () => {\n    // if it is on the last word, has to go to the first one again\n    let i = loopNum % rotation.length;\n    let fullText = rotation[i];\n    // the text to be updated, if the current state is deleting, then we take the full text and delete the last letter, and if not, it is the other way around\n    let updatedText = isDeleting ? fullText.substring(0, text.length - 1) : fullText.substring(0, text.length + 1);\n    // update the state\n    setText(updatedText);\n\n    // if it is deleting, the pace is different\n    if (isDeleting) {\n      setDelta(prevDelta => prevDelta / 2);\n    }\n\n    // if the word is typed out fully, to start deleting\n    if (!isDeleting && updatedText === fullText) {\n      setIsDeleting(true);\n      setDelta(period);\n    }\n    // if it is deleted fully, updating the deleting state to false, updating the loop number, and the display pace\n    else if (isDeleting && updatedText === '') {\n      setIsDeleting(false);\n      setLoopNum(loopNum + 1);\n      setDelta(500);\n    }\n  };\n\n  // return the banner component\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"banner\",\n    id: \"home\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 6,\n          xl: 7,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [`Welcome! I am `, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"wrap\",\n              children: text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" My name is Tsveta. I am born and raised in Burgas, Bulgaria. My passions include learning new things, travelling the world and creating. My dream is to one day become a successful web developer. \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: [\"     \", /*#__PURE__*/_jsxDEV(Nav.Link, {\n              href: \"#connect\",\n              className: `vvd ${activeLink === 'connect' ? 'active navbar-link' : 'navbar-link'}`,\n              onClick: () => onUpdateActiveLink('connect'),\n              children: \"CONTACT ME!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 38\n            }, this), \" >Let's Talk!\", /*#__PURE__*/_jsxDEV(ArrowRightCircle, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 230\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 6,\n          xl: 5,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: moon,\n            alt: \"image\",\n            className: \"moonPic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n// export the banner component\n_s(Banner, \"6g1txP1IKP5yIQS16haNlZpN3Xs=\");\n_c = Banner;\nexport default Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["useEffect","useState","Col","Container","Row","Nav","ArrowRightCircle","moon","onUpdateActiveLink","Banner","loopNum","setLoopNum","isDeleting","setIsDeleting","text","setText","delta","setDelta","Math","random","period","rotation","ticker","setInterval","tick","clearInterval","value","setActiveLink","i","length","fullText","updatedText","substring","prevDelta","activeLink"],"sources":["C:/Users/pandu/Desktop/YEAR 2/PERSONAL PORTFOLIO/personal-portfolio/src/components/Banner.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Col, Container, Row, Nav} from \"react-bootstrap\";\r\nimport { ArrowRightCircle } from \"react-bootstrap-icons\";\r\nimport  moon  from '../assets/img/moon.svg'\r\nimport onUpdateActiveLink from '../components/NavBar'\r\n\r\n\r\nconst Banner = () => {\r\n\r\n    // indicating which word is currently displaying\r\n    const [ loopNum, setLoopNum ] = useState(0)\r\n    // indicating if the word is being typed or deleted\r\n    const [ isDeleting, setIsDeleting] = useState(false)\r\n    // indicating what text is being shown for the component / showing a small portion\r\n    const [ text, setText ] = useState('')\r\n    // determines how fast a letter comes after the previous one\r\n    const [ delta, setDelta ] = useState(300 - Math.random()*100)\r\n    // indicates how much time passes between 1 extra letter being typed\r\n    const period = 2000\r\n\r\n    // list of the words I am rotating\r\n    const rotation = [ \"Tsveta Pandurska\", \"a Fontys Student\", \"an aspiring WebDev\"]\r\n\r\n    // function for typing and deleting\r\n    useEffect(() => {\r\n        let ticker = setInterval(() => {\r\n            tick()\r\n        }, delta);\r\n\r\n        // then it clears\r\n        return () => {\r\n            clearInterval(ticker)\r\n        }\r\n        // runs every time the text gets updated\r\n    }, [text]) \r\n\r\n    const onUpdateActiveLink = (value) => {\r\n        setActiveLink(value)\r\n    }\r\n\r\n    const tick = () => {\r\n        // if it is on the last word, has to go to the first one again\r\n        let i = loopNum % rotation.length\r\n        let fullText = rotation[i]\r\n        // the text to be updated, if the current state is deleting, then we take the full text and delete the last letter, and if not, it is the other way around\r\n        let updatedText = isDeleting ? fullText.substring(0, text.length - 1) : fullText.substring(0, text.length + 1)\r\n        // update the state\r\n        setText(updatedText)\r\n\r\n        // if it is deleting, the pace is different\r\n        if (isDeleting) {\r\n            setDelta(prevDelta => prevDelta/2)\r\n        }\r\n\r\n        // if the word is typed out fully, to start deleting\r\n        if (!isDeleting && updatedText === fullText) {\r\n            setIsDeleting(true)\r\n            setDelta(period)\r\n        }\r\n        // if it is deleted fully, updating the deleting state to false, updating the loop number, and the display pace\r\n        else if (isDeleting && updatedText === '') {\r\n            setIsDeleting(false)\r\n            setLoopNum(loopNum + 1)\r\n            setDelta(500)\r\n        }\r\n            \r\n        \r\n    }\r\n\r\n    // return the banner component\r\n    return (\r\n        <section className=\"banner\" id=\"home\">\r\n            <Container>\r\n                <Row  className=\"align-items-center\">\r\n                    <Col xs={12} md={6} xl={7}>\r\n                        <h1>{`Welcome! I am `}<span className=\"wrap\">{text}</span></h1>\r\n                        <p> My name is Tsveta. I am born and raised in Burgas, Bulgaria. My passions include learning new things, travelling the world and creating. My dream is to one day become a successful web developer. </p>\r\n                        <button>     <Nav.Link href=\"#connect\" className={`vvd ${activeLink === 'connect' ? 'active navbar-link' : 'navbar-link'}`} onClick={() => onUpdateActiveLink('connect')}>CONTACT ME!</Nav.Link> >Let's Talk!<ArrowRightCircle size={24}/></button>\r\n                    </Col>\r\n                    <Col xs={12} md={6} xl={5}>\r\n                        <img src={moon} alt=\"image\" className=\"moonPic\" />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </section>\r\n    )\r\n    \r\n}\r\n\r\n// export the banner component\r\nexport default Banner"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}